from fastapi import FastAPI, UploadFile, Request, File, Form
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
from app.utils.helpers import (
    extract_github_data,
    scrape_portfolio,
    extract_jd_keywords,
    pdf_to_text,
    generate_resume_json
)
from app.workflow import generate_resume_workflow

from dotenv import load_dotenv
import os
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')

app = FastAPI(title="Intelligent Resume Builder")

class JDRequest(BaseModel):
    jd: str  # Single job description string


@app.get("/test/github")
def test_github(url: str):
    return extract_github_data(url)

@app.get("/test/portfolio")
def test_portfolio(url: str):
    return scrape_portfolio(url)


@app.post("/test/jd-keywords")
async def test_jd_keywords(request: Request):
    jd_text = await request.body()
    jd_str = jd_text.decode("utf-8")
    keywords = extract_jd_keywords(jd_str)
    return JSONResponse(content={"keywords": keywords})

@app.post("/test/pdf-to-text")
async def test_pdf_to_text(file: UploadFile):
    text = await pdf_to_text(file)
    return {"text": text}

# ===============================
# MAIN SUPERVISOR RESUME ROUTE
# ===============================

@app.post("/generate-resume")
async def generate_resume_complete(
    github_url: Optional[str] = Form(None),
    portfolio_url: Optional[str] = Form(None),
    job_description: Optional[str] = Form(None),
    old_resume: Optional[UploadFile] = File(None),
    user_feedback: Optional[str] = Form(None),
    user_additions: Optional[str] = Form(None)
):
    """
    Complete resume generation route that takes ALL possible inputs from user
    and passes them to the supervisor workflow to generate final JSON resume.
    
    Args:
        github_url: GitHub profile URL (optional)
        portfolio_url: Portfolio website URL (optional) 
        job_description: Target job description text (optional)
        old_resume: Existing resume PDF file (optional)
        user_feedback: User feedback for resume improvements (optional)
        user_additions: Additional information to include (optional)
    
    Returns:
        JSON resume generated by supervisor workflow
    """
    try:
        # Extract text from uploaded resume if provided
        old_resume_text = None
        if old_resume:
            old_resume_text = await pdf_to_text(old_resume)
        
        # Execute the supervisor workflow with all inputs
        workflow_result = await generate_resume_workflow(
            github_url=github_url,
            portfolio_url=portfolio_url,
            job_description=job_description,
            old_resume_text=old_resume_text,
            user_feedback=user_feedback,
            user_additions=user_additions
        )
        
        # Return the workflow result as JSON
        return JSONResponse(content={
            "status": "success",
            "message": "Resume generated successfully",
            "resume_data": workflow_result,
            "inputs_received": {
                "github_url": bool(github_url),
                "portfolio_url": bool(portfolio_url),
                "job_description": bool(job_description),
                "old_resume_uploaded": bool(old_resume),
                "user_feedback": bool(user_feedback),
                "user_additions": bool(user_additions)
            }
        })
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"Error generating resume: {str(e)}",
                "error_type": type(e).__name__
            }
        )

from pydantic import BaseModel
from typing import List

class ResumeRequest(BaseModel):
    github_data: str
    portfolio_data: str
    jd_keywords: List[str]
    old_resume: str
    user_additions: str
    user_feedback: str

@app.post("/test/generate-resume")
async def test_generate_resume(data: ResumeRequest):
    resume = generate_resume_json(
        github_data=data.github_data,
        portfolio_data=data.portfolio_data,
        jd_keywords=data.jd_keywords,
        old_resume=data.old_resume,
        user_additions=data.user_additions,
        user_feedback=data.user_feedback
    )
    return JSONResponse(content=resume)
